// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package discord is a generated GoMock package.
package discord

import (
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "github.com/golang/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// ChannelMessageSend mocks base method.
func (m *MockSession) ChannelMessageSend(arg0, arg1 string) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSend", arg0, arg1)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSend indicates an expected call of ChannelMessageSend.
func (mr *MockSessionMockRecorder) ChannelMessageSend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSend", reflect.TypeOf((*MockSession)(nil).ChannelMessageSend), arg0, arg1)
}

// ChannelMessageSendEmbed mocks base method.
func (m *MockSession) ChannelMessageSendEmbed(arg0 string, arg1 *discordgo.MessageEmbed) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSendEmbed", arg0, arg1)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendEmbed indicates an expected call of ChannelMessageSendEmbed.
func (mr *MockSessionMockRecorder) ChannelMessageSendEmbed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendEmbed", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendEmbed), arg0, arg1)
}

// InteractionRespond mocks base method.
func (m *MockSession) InteractionRespond(interaction *discordgo.Interaction, resp *discordgo.InteractionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InteractionRespond", interaction, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// InteractionRespond indicates an expected call of InteractionRespond.
func (mr *MockSessionMockRecorder) InteractionRespond(interaction, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionRespond", reflect.TypeOf((*MockSession)(nil).InteractionRespond), interaction, resp)
}
